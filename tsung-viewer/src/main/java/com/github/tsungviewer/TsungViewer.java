/*
 * $Id$
 *
 * Copyright 2013 Valentyn Kolesnikov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.tsungviewer;

import com.github.tsungviewer.stubs.Client;
import com.github.tsungviewer.stubs.Clients;
import com.github.tsungviewer.stubs.Request;
import com.github.tsungviewer.stubs.Server;
import com.github.tsungviewer.stubs.Session;
import com.github.tsungviewer.stubs.Transaction;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import com.github.tsungviewer.stubs.Tsung;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JTree;
import javax.swing.ToolTipManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

public class TsungViewer extends javax.swing.JFrame {
    
    private Tsung config = null;
    private File file;
    private JFileChooser chooser;

    /** Creates new form Antenna */
    public TsungViewer() {
        initComponents();
        chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "XML config file", "xml");
        chooser.setFileFilter(filter);
    }

    private void createXml() throws UnsupportedOperationException {
        JAXBContext jContext;
        try {
            jContext = JAXBContext.newInstance("com.github.tsungviewer.stubs");
        } catch (JAXBException e) {
            throw new UnsupportedOperationException("Can't create JAXB", e);
        }
        Marshaller marshaller;
        try {
            marshaller = jContext.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
            marshaller.marshal(config, file);
        } catch (JAXBException e) {
            Logger.getLogger(TsungViewer.class.getName()).log(Level.WARNING, "Can''t create JAXB Marshaller {0}", e.getMessage());
        }
    }

    private Tsung extractXml(File xml) {
        JAXBContext jContext;
        try {
            jContext = JAXBContext.newInstance("com.github.tsungviewer.stubs");
        } catch (JAXBException e) {
            throw new UnsupportedOperationException("Can't create JAXB", e);
        }
        Unmarshaller unmarshaller;
        config = null;
        try {
            unmarshaller = jContext.createUnmarshaller();
            config = (Tsung) unmarshaller.unmarshal(xml);
        } catch (JAXBException e) {
            Logger.getLogger(TsungViewer.class.getName()).log(Level.WARNING, "Can''t create JAXB Unmarshaller, {0}", xml);
        }
        return config;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TsungViewer");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Components "));

        jButton3.setText("Select file");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setRootVisible(false);
        jScrollPane1.setViewportView(jTree1);

        jButton1.setText("Save xml file");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jButton3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jButton1))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton3)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Properties"));
        jPanel2.setMaximumSize(new java.awt.Dimension(610, 444));
        jPanel2.setPreferredSize(new java.awt.Dimension(662, 447));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton4.setText("OK");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText(" ");

        jButton5.setText("Add");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Remove");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 312, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 265, Short.MAX_VALUE)
                .add(jButton5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(698, Short.MAX_VALUE)
                .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(jPanel2Layout.createSequentialGroup()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jButton6)
                    .add(jButton5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 439, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButton4)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel2);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1129, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
        jButton6.setEnabled(true);
    }//GEN-LAST:event_jTable1FocusGained
    
    private void jTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusLost

    }//GEN-LAST:event_jTable1FocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        createXml();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }
        file = chooser.getSelectedFile();
        jButton1.setEnabled(true);
        config = extractXml(file);
        initTree();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        jTable1.setVisible(false);
        while (jTable1.getSelectedRows().length > 0) {
            ((DefaultTableModel) jTable1.getModel()).removeRow(jTable1.getSelectedRows()[0]);
        }
        jTable1.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    }                                        
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    private static void setLookAndFeel() {
        javax.swing.UIManager.LookAndFeelInfo[] infos = UIManager.getInstalledLookAndFeels();
        String firstFoundClass = null;
        for (javax.swing.UIManager.LookAndFeelInfo info : infos) {
            String foundClass = info.getClassName();
            if ("Nimbus".equals(info.getName())) {
                firstFoundClass = foundClass;
                break;
            }
            if (null == firstFoundClass) {
                firstFoundClass = foundClass;
            }
        }

        if (null == firstFoundClass) {
            throw new IllegalArgumentException("No suitable Swing looks and feels");
        } else {
            try {
                UIManager.setLookAndFeel(firstFoundClass);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(TsungViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(TsungViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(TsungViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(TsungViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        setLookAndFeel();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TsungViewer().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    private void initTree() {
        DefaultMutableTreeNode treeNode = new DefaultMutableTreeNode("root");
        DefaultTreeModel model = new DefaultTreeModel(treeNode);
        DefaultMutableTreeNode clientsNode = new DefaultMutableTreeNode("Clients");
        model.insertNodeInto(clientsNode, treeNode, treeNode.getChildCount());
        model.insertNodeInto(new DefaultMutableTreeNode(config.getClients().getClient()), clientsNode, clientsNode.getChildCount());
        DefaultMutableTreeNode serversNode = new DefaultMutableTreeNode("Servers");
        model.insertNodeInto(serversNode, treeNode, treeNode.getChildCount());
        model.insertNodeInto(new DefaultMutableTreeNode(config.getServers().getServer()), serversNode, serversNode.getChildCount());
        DefaultMutableTreeNode sessionsNode = new DefaultMutableTreeNode("Sessions");
        model.insertNodeInto(sessionsNode, treeNode, treeNode.getChildCount());
        for (Session session : config.getSessions().getSession()) {
            DefaultMutableTreeNode sessionNode = new DefaultMutableTreeNode(session);
            model.insertNodeInto(sessionNode, sessionsNode, sessionsNode.getChildCount());
            for (Object thinktimeOrTransaction : session.getThinktimeOrTransaction()) {
                if (thinktimeOrTransaction instanceof Transaction) {
                    Transaction transaction = (Transaction) thinktimeOrTransaction;
                    DefaultMutableTreeNode transactionNode = new DefaultMutableTreeNode(transaction);
                    model.insertNodeInto(transactionNode, sessionNode, sessionNode.getChildCount());
                    for (Request request : transaction.getRequest()) {
                        DefaultMutableTreeNode requestNode = new DefaultMutableTreeNode(request);
                        model.insertNodeInto(requestNode, transactionNode, transactionNode.getChildCount());
                    }
                }
            }
        }
        jTree1.setModel(model);
        ToolTipManager.sharedInstance().registerComponent(jTree1);
        jTree1.setCellRenderer(new MyRenderer());
        MouseListener ml = new MouseAdapter() {
            private void myPopupEvent(MouseEvent e) {
                int x = e.getX();
                int y = e.getY();
                JTree tree = (JTree)e.getSource();
                TreePath path = tree.getPathForLocation(x, y);
                if (path == null) {
                    return;
                }
                jTree1.setSelectionPath(path);
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
//                final String labelData = node.getUserObject() instanceof Action
//                        ? ((Action) node.getUserObject()).getId() : node.getUserObject() instanceof CommandSet
//                        ? ((CommandSet) node.getUserObject()).getId() : node.getUserObject().toString();
//
//                String label = labelData;
//                if (node.getUserObject() instanceof Action) {
//                    label = "Copy " + ((Action) node.getUserObject()).getId();
//                }
//                JPopupMenu popup = new JPopupMenu();
//                JMenuItem jMenuItem = new JMenuItem(label);
//                jMenuItem.addActionListener(new ActionListener() {
//                    public void actionPerformed(ActionEvent ae) {
//                        StringSelection selection = new StringSelection(labelData);
//                        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
//                        clipboard.setContents(selection, selection);
//                    }
//                });
//                popup.add(jMenuItem);
//                popup.show(tree, x, y);
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    myPopupEvent(e);
                }
            }
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    myPopupEvent(e);
                }
            }

        };
        jTree1.addMouseListener(ml);
    }
    
    private class MyRenderer extends DefaultTreeCellRenderer {
        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected,
            boolean isExpanded, boolean isLeaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, isSelected, isExpanded, isLeaf, row, hasFocus);
            Object userObject = ((DefaultMutableTreeNode) value).getUserObject();
            if (userObject instanceof Client) {
                setText(((Client) userObject).getHost());
                setToolTipText("maxusers=" + ((Client) userObject).getMaxusers());
            } else if (userObject instanceof Server) {
                setText(((Server) userObject).getHost());
                setToolTipText("port=" + ((Server) userObject).getPort() + " type=" + ((Server) userObject).getType());
            } else if (userObject instanceof Session) {
                setText(((Session) userObject).getName());
                setToolTipText("probability=" + ((Session) userObject).getProbability() + " type=" + ((Session) userObject).getType());
            } 
            

            
            else {
                setText(value.toString() + " [" + userObject.getClass().getName() + "]");
            }
            return this;
        }
    }

    
}
